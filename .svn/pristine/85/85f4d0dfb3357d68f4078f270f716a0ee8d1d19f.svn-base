<template>
  <div id="configurecomp">
    <el-collapse v-model="activeNames">
      <!-- <el-collapse-item title="查询条件" name="1" class="searchItem">
        <div class="reportTitle">
          <div class="inputbox">
            <el-input v-model="keyinput" placeholder="请输入关键字查询" @keyup.native.enter="querydata" @blur="querydata"></el-input>
            <el-button class="querybtn" @click="querydata" icon="search">查询</el-button>
          </div>
        </div>
      </el-collapse-item> -->
      <el-collapse-item
        title="查看/编辑组件"
        name="2"
      >
        <div class="reportTitle">
          <div class="inputbox">
            <el-input
              v-model="keyinput"
              placeholder="请输入关键字查询"
              @keyup.native.enter="querydata"
              @blur="querydata"
            ></el-input>
            <el-button
              class="querybtn"
              @click="querydata"
              icon="el-icon-search"
            >查询</el-button>
          </div>
          <div class="btngroup">
            <el-button
              @click="addopen"
              icon="el-icon-plus"
            >新增</el-button>
            <el-button
              @click="delopen"
              class="btnDel"
              icon="el-icon-delete"
            >删除</el-button>
          </div>
          <div class="tableboxmsg">
            <div class="content">
              <div class="eletable">
                <el-table
                  :data="tableData"
                  style="width: 100%"
                  border
                  @selection-change="handleSelectionChange"
                >
                  <el-table-column
                    type="selection"
                    width="55"
                  ></el-table-column>
                  <el-table-column
                    prop="label"
                    label="组件名称"
                    type="text"
                    size="small"
                    show-overflow-tooltip
                  ></el-table-column>
                  <el-table-column
                    prop="name"
                    label="组件编码"
                    type="text"
                    size="small"
                    show-overflow-tooltip
                  > </el-table-column>
                  <el-table-column
                    prop="value"
                    label="组件sql内容"
                    type="text"
                    size="small"
                    show-overflow-tooltip
                  > </el-table-column>
                  <el-table-column
                    prop="componentType"
                    label="组件类别"
                    type="text"
                    size="small"
                    show-overflow-tooltip
                  > </el-table-column>
                  <el-table-column
                    prop="rule"
                    label="规则"
                    type="text"
                    size="small"
                    show-overflow-tooltip
                  > </el-table-column>
                  <el-table-column
                    label="操作"
                    width="80"
                  >
                    <template slot-scope="scope">
                      <el-button
                        type="text"
                        size="small"
                        @click="edit(scope.row, scope.$index)"
                      >修改</el-button>
                    </template>
                  </el-table-column>
                </el-table>
                <div class="paginationbox">
                  <el-pagination
                    @current-change="currentpagechange"
                    :total="total"
                    :current-page="offset"
                    :page-size="pageSize"
                    layout="prev, pager, next, total, jumper"
                  >
                  </el-pagination>
                </div>
              </div>
            </div>
          </div>
        </div>
      </el-collapse-item>
    </el-collapse>
    <!-- 新增和修改的弹窗 -->
    <el-dialog
      :title="poptitle"
      :visible.sync="dialogFormVisible"
    >
      <el-form
        :model="assemblyForm"
        ref="ruleForm"
        label-width="120px"
        class="demo-ruleForm"
      >
        <el-form-item
          label="id："
          v-if="showId"
        >
          <el-input
            v-model="assemblyForm.id"
            disabled
          ></el-input>
        </el-form-item>
        <el-form-item label="组件名称：">
          <el-input
            v-model="assemblyForm.label"
            placeholder="请输入组件名称"
          ></el-input>
        </el-form-item>
        <el-form-item label="组件编码：">
          <el-input
            v-model="assemblyForm.name"
            placeholder="请输入组件名称组件编码"
          ></el-input>
        </el-form-item>
        <el-form-item label="组件sql内容：">
          <el-input
            type="textarea"
            v-model="assemblyForm.value"
            placeholder="请输入sql内容"
          ></el-input>
        </el-form-item>
        <el-form-item label="组件类别：">
          <el-select
            v-model="assemblyForm.componentType"
            filterable
            v-if="this.queryAssemblys.length !== 0"
            placeholder="请选择组件"
          >
            <el-option
              v-for="(item, index) in queryAssemblys"
              :key="index"
              :label="item.label"
              :value="item.label"
            ></el-option>
          </el-select>
        </el-form-item>
        <el-form-item
          label="规则："
          prop="rule"
        >
          <el-input
            v-model="assemblyForm.rule"
            placeholder="请输入规则"
          ></el-input>
        </el-form-item>
      </el-form>
      <div
        slot="footer"
        class="dialog-footer"
      >
        <el-button @click="resetForm('ruleForm')">取 消</el-button>
        <el-button @click="submitForm('ruleForm')">确 定</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<style lang="scss">
#configurecomp {
  width: calc(100% - 20px);
  height: calc(100% - 20px);
  overflow: auto;
  padding: 10px;
  .el-collapse {
    .el-collapse-item__header {
      padding-left: 15px;
      border-bottom: 1px solid #dfe6ec;
      .el-collapse-item__arrow {
        float: left;
      }
    }
    .el-collapse-item__content {
      padding: 0px 15px 10px;
      .el-checkbox__inner {
        width: 18px;
        height: 18px;
      }
      .el-checkbox__inner::after {
        top: 3px;
        left: 6px;
      }
      .el-checkbox__input.is-indeterminate .el-checkbox__inner::before {
        top: 7px;
      }
      .el-checkbox__input.is-checked .el-checkbox__inner,
      .el-checkbox__input.is-indeterminate .el-checkbox__inner {
        background-color: #6d71ef;
        border-color: #6d71ef;
      }
      .el-checkbox__inner:hover {
        border-color: #6d71ef;
      }
    }
  }
  .searchItem {
    margin-bottom: 10px;
  }
  .reportTitle {
    background: #fff;
    padding: 10px 0 5px 10px;
    padding: 0 5px;
    margin: 0px 0px 10px 0;
    border-radius: 3px;
    h4 {
      padding: 10px;
      margin: 0;
      color: #666;
      background: #f5f5f5;
      border-radius: 3px;
      border-left: 5px solid #f5f5f5;
      border: 1px solid #dfe6ec;
    }
  }
  .tableboxmsg {
    .el-button--text {
      color: rgba(123, 126, 255, 0.9);
    }
    .paginationbox {
      margin-top: 10px;
    }
    .el-table .cell,
    .el-table th div,
    .el-table--border td:first-child .cell,
    .el-table--border th:first-child .cell {
      padding-left: 14px;
    }
    .el-table__header-wrapper {
      th {
        padding: 11px 0;
        padding: 0;
        height: 32px;
        background: #f5f7fb;
      }
    }
    .el-table__body-wrapper {
      td {
        padding: 6px 0;
        padding: 0;
      }
      .el-button--text:hover {
        background: none;
      }
    }
  }
  .inputbox {
    margin: 10px auto;
    float: left;
    .el-input {
      width: 240px;
    }
    .querybtn {
      margin-left: 10px;
    }
    .el-button {
      padding: 12px;
    }
  }
  .el-pagination {
    text-align: right;
  }
  .el-table th.gutter {
    display: table-cell !important;
  }
  .btngroup {
    .el-button {
      background: rgba(123, 126, 255, 0.9);
      border: 1px solid rgba(123, 126, 255, 0.9);
      color: #fff;
    }
    float: right;
    margin: 15px auto 0px;
    .btnDel {
      // float: right;
    }
    .el-button {
      padding: 8px;
    }
  }
  .el-dialog__header {
    background-color: rgba(123, 126, 255, 0.9);
    border-bottom: 1px solid #ccc;
    padding: 15px 20px;
    .el-dialog__headerbtn:focus .el-dialog__close,
    .el-dialog__headerbtn:hover .el-dialog__close {
      color: #fff;
    }
    .el-dialog__title {
      color: #fff;
      font-weight: bold;
    }
    .el-dialog__close {
      color: #fff;
    }
    .el-dialog__headerbtn {
      top: 13px;
    }
    .el-icon-close:before {
      font-size: 25px;
      font-weight: bold;
    }
  }
  .el-dialog__body {
    padding-bottom: 8px;
  }
  .el-dialog__footer {
    padding: 0 20px 30px;
    .dialog-footer {
      text-align: center;
    }
  }
}
</style>

<script>
import {
  queryByAssembly,
  addAssembly,
  queryAssemblyModel,
  editAssembly,
  delAssembly
} from '@/services/query';
export default {
  data() {
    return {
      poptitle: '新增',
      tableData: [],
      activeNames: ['1', '2'],
      offset: 1,
      pageSize: 10,
      keyinput: '',
      total: 0,
      assemblyForm: {
        id: '',
        label: '',
        name: '',
        value: '',
        componentType: '',
        rule: ''
      },
      dialogFormVisible: false,
      queryAssemblys: [],
      selectdata: [],
      isAdd: true,
      showId: false
    }
  },
  beforeUpdate() { },
  updated() { },
  created() { },
  mounted() {
    this.Getdata();
  },
  computed: {},
  components: {},
  methods: {
    // 获取数据
    Getdata() {
      let val = {
        'label': this.keyinput,
        'offset': this.offset,
        'pageSize': this.pageSize
      };
      queryByAssembly(val).then((res) => {
        if (res.status === 200) {
          this.tableData = res.data.rows;
          this.total = res.data.total;
        }
      })
    },
    // 列表进行选择
    handleSelectionChange(select) {
      this.selectdata = JSON.parse(JSON.stringify(select));
    },
    // 点击查询
    querydata() {
      this.Getdata();
    },
    // 删除 delAssembly
    delopen() {
      let del = [];
      for (let i of this.selectdata) {
        del.push(i.id);
      }
      delAssembly(del).then((res) => {
        if (res.status === 200) {
          this.Getdata();
        }
      })
    },
    // 新增
    addopen() {
      this.dialogFormVisible = true;
      this.poptitle = '新增';
      this.isAdd = true;
      this.showId = false;
      queryAssemblyModel().then((res) => {
        if (res.status === 200) {
          this.queryAssemblys = res.data;
        }
      })
    },
    // 修改回显数据 editAssembly
    edit(row, index) {
      this.dialogFormVisible = true;
      this.isAdd = false;
      this.showId = true;
      this.poptitle = '修改';
      this.assemblyForm.label = row.label;
      this.assemblyForm.name = row.name;
      this.assemblyForm.value = row.value;
      this.assemblyForm.rule = row.rule;
      this.assemblyForm.id = row.id;
      this.showId = true;
      queryAssemblyModel().then((res) => {
        if (res.status === 200) {
          this.queryAssemblys = res.data;
          for (let i in this.queryAssemblys) {
            if (row.componentType === this.queryAssemblys[i].value) {
              this.assemblyForm.componentType = this.queryAssemblys[i].label;
            }
          }
        }
      })
    },
    // 点击翻页
    currentpagechange(val) {
      this.offset = val;
      this.Getdata();
    },
    // 提交新增
    submitForm(ruleForm) {
      if (this.isAdd === true) {
        for (let i in this.queryAssemblys) {
          if (this.assemblyForm.componentType === this.queryAssemblys[i].label) {
            let param = {
              label: this.assemblyForm.label,
              name: this.assemblyForm.name,
              value: this.assemblyForm.value,
              componentType: this.queryAssemblys[i].value,
              rule: this.assemblyForm.rule
            }
            addAssembly(param).then((res) => {
              if (res.status === 200) {
                this.dialogFormVisible = false;
                this.Getdata();
                this.assemblyForm.label = '';
                this.assemblyForm.name = '';
                this.assemblyForm.value = '';
                this.assemblyForm.componentType = '';
                this.assemblyForm.rule = '';
              }
            })
          }
        }
      } else {
        for (let i in this.queryAssemblys) {
          if (this.assemblyForm.componentType === this.queryAssemblys[i].label) {
            let param = {
              id: this.assemblyForm.id,
              label: this.assemblyForm.label,
              name: this.assemblyForm.name,
              value: this.assemblyForm.value,
              componentType: this.queryAssemblys[i].value,
              rule: this.assemblyForm.rule
            }
            editAssembly(param).then((res) => {
              if (res.status === 200) {
                this.dialogFormVisible = false;
                this.Getdata();
                this.assemblyForm.label = '';
                this.assemblyForm.name = '';
                this.assemblyForm.value = '';
                this.assemblyForm.componentType = '';
                this.assemblyForm.rule = '';
                // this.queryAssemblys = res.data;
              }
            })
          }
        }
      }
    },
    resetForm(ruleForm) {
      // this.$refs[formName].resetFields();
      this.dialogFormVisible = false;
      this.assemblyForm.label = '';
      this.assemblyForm.name = '';
      this.assemblyForm.value = '';
      this.assemblyForm.componentType = '';
      this.assemblyForm.rule = '';
    }
  }
}
</script>
