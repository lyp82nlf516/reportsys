<template>
  <div class="configchartbox">
    <div class="toolbox">
      <div @click="select('bar')"><img src="../../assets/img/imgchart/bar.png" alt="柱状图" srcset="" title="柱状图" width="22"></div>
      <div @click="select('pie')"><img src="../../assets/img/imgchart/pie.png" alt="饼状图" srcset="" title="饼状图" width="24"></div>
      <div @click="select('line')"><img src="../../assets/img/imgchart/line.png" alt="折线图" srcset="" title="折线图" width="30"></div>
      <div @click="selectquery('select')"><img src="../../assets/img/imgchart/select.png" alt="下拉" srcset="" title="下拉" width="24"></div>
      <div @click="selecttext('text')"><img src="../../assets/img/imgchart/text.png" alt="文本" srcset="" title="文本" width="20"></div>
      <div @click="selectquery('input')"><img src="../../assets/img/imgchart/input.png" alt="输入框" srcset="" title="输入框" width="24"></div>
      <div @click="selectquery('date')"><img src="../../assets/img/imgchart/time.png" alt="时间" srcset="" title="时间" width="24"></div>
      <div @click="selecttextname('text')">
        <span class="formname">★</span><img src="../../assets/img/imgchart/formname.png" alt="报表名" srcset="" title="报表名" width="24"></div>
      <div @click="selectquery('val')"><img src="../../assets/img/imgchart/jzd.png" alt="键值对" srcset="" title="键值对" width="24"></div>
      <div @click="selecttable('list')"><img src="../../assets/img/imgchart/table.png" alt="表格" srcset="" title="表格" width="24"></div>
    </div>
    <div class="templatebox">
      <div class="allcon dragbox" id="dragbox">
        <div class="dragdom querybox" v-for="(item, index) in querys" :key="item.key" :id="item.key" :class="('querys' + index)" :index="item.other" :dragindex="index" type="querys">
          <div class="content" @click="item.editshow = true">
            <span class="inputlabel">{{item.label}}</span>
            <div class="inputdiv" v-if="item.type === 'input' || item.type === 'val'">
              <el-input v-model="item.value"></el-input>
            </div>
            <div class="inputdiv" v-if="item.type === 'select'">
              <el-input v-model="item.value" icon="caret-bottom"></el-input>
            </div>
            <div class="inputdiv" v-if="item.type === 'date'">
              <el-input v-model="item.value" icon="date"></el-input>
            </div>
            <i class="el-icon-delete qicon" @click='delquery(index)'></i>
          </div>
          <div class="handle handlequery"></div>
          <!-- <div class="dragall" :id="('queryzoom' + index)"></div> -->
          <el-popover placement="top" v-model="item.editshow">
            <el-form :rules="rules" :ref="('querysform' + index)" label-width="60px" class="demo-ruleForm">
              <el-form-item label="label" prop="xz">
                <el-input type="textarea" v-model="item.label" :rows='1'></el-input>
              </el-form-item>
              <el-form-item label="数据sql" prop="yz">
                <el-input type="textarea" v-model="item.sql" :rows='1'></el-input>
              </el-form-item>
              <el-form-item class="btnitem">
                <el-button type="primary" @click="item.editshow = false">确定</el-button>
              </el-form-item>
            </el-form>
          </el-popover>
        </div>
        <div class="dragdom querybox" v-for="(item, index) in text" :key="item.key" :id="item.key" :class="('text' + index)" :index="item.other" :dragindex="index" type="text">
          <div class="content">
            <div v-if="!item.editshow">
              <el-input v-if="!item.editshow" class="input-new-tag" placeholder="+ 文字" icon="close" v-model="item.data" ref="saveTagInput" size="mini" @keyup.enter.native="edittext(item, index)" @blur="edittext(item, index)" @click="deltext(index)">
              </el-input>
              <el-input v-else class="input-new-tag" placeholder="+ 文字" v-model="item.data" ref="saveTagInput" size="mini" @keyup.enter.native="submittext(item, index)" @blur="submittext(item, index)">
              </el-input>
            </div>
            <p v-else>
              <span v-if="item.data === ''" class="textshow nodatatext" @click="item.editshow = false">请输入....</span>
              <span v-if="item.data !== ''" class="textshow" @click="item.editshow = false">{{item.data}}</span>
            </p>
          </div>
          <div class="handle handlequery"></div>
        </div>
        <div class="dragdom chartbox" v-for="(item, index) in charts" :key="item.key" :id="item.key" :class="('charts' + index)" :index="item.other" :dragindex="index" type="charts">
          <div class="handle"></div>
          <i class="el-icon-close delchart" @click='delcharts(index)'></i>
          <div class="dragall" :id="('chartszoom' + item.other)"></div>
          <div class="content" @click="item.editshow = true">
            <img src="../../assets/img/imgchart/zzte.png" alt="柱状图" srcset="" v-if="item.type==='bar'">
            <img src="../../assets/img/imgchart/zxte.png" alt="柱状图" srcset="" v-if="item.type==='line'">
            <img src="../../assets/img/imgchart/bzte.png" alt="饼状图" srcset="" v-if="item.type==='pie'">
            <!-- <chart :options="item.option" auto-resize :ref="('charts' + index)"></chart> -->
          </div>
          <div class="msgbox" v-show='item.editshow'>
            <div class="msgconter">
              <el-form :rules="rules" :ref="('chartsform' + index)" label-width="70px" class="demo-ruleForm">
                <el-form-item label="x轴" prop="x">
                  <el-input type="textarea" v-model="item.sql.x" :rows='1'></el-input>
                </el-form-item>
                <el-form-item label="y轴" prop="y">
                  <el-input type="textarea" v-model="item.sql.y" :rows='1'></el-input>
                </el-form-item>
                <el-form-item label="z轴" prop="z">
                  <el-input type="textarea" v-model="item.sql.z" :rows='1'></el-input>
                </el-form-item>
                <el-form-item label="SQL" prop="sql">
                  <el-input type="textarea" v-model="item.sql.sql" :rows='1'></el-input>
                </el-form-item>
                <el-form-item>
                  <el-button type="primary" @click="item.editshow = false">确定</el-button>
                  <el-button @click="item.editshow = false">取消</el-button>
                </el-form-item>
              </el-form>
            </div>
          </div>
        </div>
        <div class="dragdom listbox" v-for="(item, index) in list" :key="item.key" :id="item.key" :class="('list' + index)" :index="item.other" :dragindex="index" type="list">
          <div class="handle"></div>
          <i class="el-icon-close dellist" @click='dellist(index)'></i>
          <div class="dragall" :id="('listzoom' + item.other)"></div>
          <div class="content" @click="item.editshow = true">
            <img src="../../assets/img/imgchart/tablebig.png" alt="表格" srcset="">
          </div>
          <div class="msgbox" v-show='item.editshow'>
            <div class="msgconter">
              <el-form :rules="rules" :ref="('listform' + index)" label-width="60px" class="demo-ruleForm">
                <el-form-item label="表头" prop="title">
                  <el-input type="textarea" v-model="item.title" :rows='1'></el-input>
                </el-form-item>
                <el-form-item label="SQL" prop="sql">
                  <el-input type="textarea" v-model="item.sql" :rows='1'></el-input>
                </el-form-item>
                <el-form-item>
                  <el-button type="primary" @click="item.editshow = false">确定</el-button>
                  <el-button @click="item.editshow = false">取消</el-button>
                </el-form-item>
              </el-form>
            </div>
          </div>
        </div>
      </div>
      <el-button type="primary" class="savebtn" @click="savetemplate">保存</el-button>
    </div>
  </div>
</template>
<style lang="scss">
.configchartbox {
  width: 100%;
  height: 100%;
  background: #fff;
  padding: 2px;
  .toolbox {
    width: 50px;
    height: 100%;
    float: left;
    border: 1px solid #039df3;
    // box-shadow: 0px 3px 3px 3px rgba(74, 160, 234, 0.39) inset;
    > div {
      text-align: center;
    }
    .formname {
      color: red;
      float: left;
    }
  }
  .templatebox {
    width: calc(100% - 58px);
    height: 100%;
    float: left;
    border: 1px solid #039df3;
    margin-left: 1px;
    overflow: auto;
    .dragbox {
      position: relative;
    }
    .allcon {
      width: 100%;
      position: relative;
      height: calc(100% - 10px);
      // height: 1000px;
      //  background-color: #fff;
    }
    .dragdom {
      position: absolute;
    }
    .chartbox {
      height: 250px;
      width: 300px;
      border: 1px solid #ccc;
      .content {
        width: 100%;
        height: 100%;
        img {
          width: 100%;
          height: 100%;
        }
      }
      .msgbox {
        width: 100%;
        height: 100%;
        background-color: rgba(250, 250, 250, 0.7);
        position: absolute;
        top: 0;
        left: 0;
        .msgconter {
          width: 80%;
          height: 200px;
          position: absolute;
          top: 0;
          left: 0;
          bottom: 0;
          right: 0;
          margin: auto;
          // background-color: #fff;
          overflow: auto;
        }
        .el-form {
          .el-form-item {
            margin-bottom: 0px;
          }
          .el-form-item__label {
            font-size: 12px;
          }
          .el-textarea__inner {
            border: 1px solid blue;
            padding: 2px 3px;
          }
        }
        .el-button {
          padding: 5px 10px;
          font-size: 12px;
          border-radius: 0;
        }
      }
    }
    .listbox {
      height: 300px;
      width: 98%;
      border: 1px solid #ccc;
      .content {
        width: 100%;
        height: 100%;
        img {
          width: 100%;
          height: 100%;
        }
      }
      .msgbox {
        width: 100%;
        height: 100%;
        background-color: rgba(250, 250, 250, 0.7);
        position: absolute;
        top: 0;
        left: 0;
        .msgconter {
          width: 90%;
          height: 120px;
          position: absolute;
          top: 0;
          left: 0;
          bottom: 0;
          right: 0;
          margin: auto;
          // background-color: #fff;
          overflow: auto;
        }
        .el-form {
          .el-form-item {
            margin-bottom: 0px;
          }
          .el-form-item__label {
            font-size: 12px;
          }
          .el-textarea__inner {
            border: 1px solid blue;
            padding: 2px 3px;
          }
        }
        .el-button {
          padding: 5px 10px;
          font-size: 12px;
          border-radius: 0;
        }
      }
    }
    .activedom {
      box-shadow: 3px 3px 5px #ccc;
      .content {
        box-shadow: -3px -3px 5px #ccc;
      }
    }
    .querybox {
      height: 30px;
      .content {
        height: 100%;
        .inputlabel {
          float: left;
          height: 30px;
          color: #000;
          line-height: 30px;
          margin-right: 5px;
        }
        .inputdiv {
          float: left;
        }
        .el-input {
          font-size: 12px;
        }
        .el-input__inner {
          border: 1px solid blue;
          height: 30px;
          border-radius: 0;
        }
        .input-new-tag {
          .el-input__inner {
            border: 1px solid #bfcbd9;
            border-radius: 4px;
          }
        }
        .textshow {
          color: #000;
        }
      }
      // .msgbox {
      //     width: 100%;
      //     height: 100%;
      //     background-color: rgba(150, 150, 150, 0.1);
      //     position: absolute;
      //     top: 0;
      //     left: 0;
      // }
      .qicon {
        float: left;
        height: 30px;
        width: 16px;
        line-height: 30px;
        color: #fff;
        background-color: blue;
      }
      .el-popover {
        z-index: 2009;
        .el-form {
          .el-form-item {
            margin-bottom: 0px;
          }
          .el-form-item__label {
            font-size: 12px;
          }
          .el-textarea__inner {
            border: 1px solid blue;
            padding: 2px 3px;
          }
          .el-form-item__content {
            //  margin-left: 10px!important;
          }
          .btnitem {
            .el-form-item__content {
              margin-left: 40px;
            }
          }
        }
        .el-button {
          padding: 5px 10px;
          font-size: 12px;
          float: right;
          margin-top: 5px;
        }
      }
      .nodatatext {
        color: #ccc !important;
      }
    }
    .delchart {
      width: 40px;
      height: 40px;
      position: absolute;
      margin: auto;
      right: -12px;
      top: 10px;
      color: blue;
      cursor: pointer;
    }
    .dellist {
      width: 40px;
      height: 40px;
      position: absolute;
      margin: auto;
      right: -12px;
      top: 10px;
      color: blue;
      cursor: pointer;
    }
    .handle {
      width: 40px;
      height: 40px;
      position: absolute;
      margin: auto;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      background: url('../../assets/img/imgchart/wghandel.png');
      background-size: 100% 100%;
      cursor: move;
      opacity: 0.2;
    }
    .handlequery {
      width: 30px;
      height: 30px;
      position: absolute;
      margin: auto;
      top: -35px;
      background: url('../../assets/img/imgchart/but.png');
      background-size: 100% 100%;
      cursor: move;
      opacity: 0;
    }
    .handle:hover {
      opacity: 1;
    }
    .handlequery:hover {
      opacity: 0.9;
    }
    .dragall {
      bottom: 0px;
      right: 0px;
      position: absolute;
      width: 15px;
      height: 15px;
      background: url('../../assets/img/iconhead/Dragiconleft.png');
      background-size: 100% 100%;
      cursor: nw-resize;
    }
    .savebtn {
      position: fixed;
      bottom: 10px;
      right: 5px;
      z-index: 9;
    }
    .el-button {
      padding: 5px 10px;
      font-size: 12px;
      border-radius: 0;
    }
  }
}
</style>
<script>
import Draggabilly from 'draggabilly';
import {
  dragComponent,
} from '@/services/query';
export default {
  data() {
    return {
      querys: [],
      charts: [],
      text: [],
      list: [],
      ruleForm: {
        xz: '',
        yz: ''
      },
      rules: {
        x: '',
        y: ''
      },
      visible2: false,
      formname: '',
      chartsi: 0,
      querysi: 0,
      texti: 0,
      listi: 0,

    }
  },
  mounted() {
    // this.testparam();
    let dragDom = this.dragDom = new Drag();
    dragDom.listenevent();
    // 窗口改变大小是要调用的方法
    dragDom.windowReSize();
    window.onresize = function () {
      dragDom.windowReSize();
    };
  },
  // 此处优化的部分很多，以后有时间再优化（ps: 很多函数可以抽象出来直接调用）by xx
  // select 'beijing' as city ,'01' as month,'100' as data from dual union all  select 'beijing' as city ,'02' as month,'800' as data from dual union all select 'beijing' as city ,'03' as month,'300' as data from dual union all select 'beijing' as city ,'04' as month,'600' as data from dual union all select 'beijing' as city ,'05' as month,'100' as data from dual union all select 'beijing' as city ,'06' as month,'900' as data from dual union all select 'beijing' as city ,'07' as month,'200' as data from dual union all  select 'beijing' as city ,'08' as month,'600' as data from dual union all select 'shanghai' as city ,'01' as month,'100' as data from dual
  methods: {
    // 保存
    savetemplate() {
      if (this.visible2) {
        let param = {
          query: JSON.parse(JSON.stringify(this.querys)).map((item) => {
            item.position = JSON.stringify(item.position);
            return item
          }),
          charts: JSON.parse(JSON.stringify(this.charts)).map((item) => {
            item.data = JSON.stringify(item.data);
            item.position = JSON.stringify(item.position);
            item.sql = JSON.stringify(item.sql);
            return item
          }),
          text: JSON.parse(JSON.stringify(this.text)).map((item) => {
            item.position = JSON.stringify(item.position);
            return item
          }),
          list: JSON.parse(JSON.stringify(this.list)).map((item) => {
            item.position = JSON.stringify(item.position);
            item.data = JSON.stringify(item.data);
            return item
          })
        }
        dragComponent(param).then((res) => {
          if (res.code === '0') {
            this.$router.push({
              // path: `/createdchart/${res.data}`
              path: `/createdchart/${res.data}`
            });
          }
        })
      } else {
        this.$confirm('报表名称为空，请配置报表名称', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
        })
      }
    },
    // 文字组件的方法
    handleInputConfirm(index) {
      this.text[index].editshow = true;
    },
    select(data) {
      this.charts.push({
        uniname: this.formname,
        activeflag: false, // 新增加的属性，默认为false
        editshow: false, // 新增加的属性，默认为false
        other: this.chartsi,
        type: data,
        key: `charts${this.chartsi}`,
        sql: { x: '', y: '', z: '', sql: '' },
        position: {
          width: '',
          height: '',
          top: '',
          left: ''
        },
        data: {
          x: [],
          y: [],
        }
      })
      this.$nextTick(() => {
        this.initposition('charts');
        let dragDom = this.dragDom = new Drag();
        dragDom.listenevent(this);
        dragDom.dragzoom(`chartszoom${this.chartsi}`, `charts${this.chartsi}`, this.$refs[`charts${this.chartsi}`]);
        this.chartsi++;
      })
    },
    selectquery(data) {
      this.querys.push({
        uniname: this.formname,
        activeflag: false, // 新增加的属性，默认为false
        editshow: false, // 新增加的属性，默认为false
        other: this.querysi, // 新增加的属性，默认为false
        label: '',
        value: '',
        type: data,
        position: {
          width: '',
          height: '',
          top: '',
          left: ''
        },
        key: `querys${this.querysi}`,
        sql: '',
      })
      this.$nextTick(() => {
        this.initposition('querys');
        let dragDom = this.dragDom = new Drag();
        dragDom.listenevent(this);
        this.querysi++;
      })
    },
    selecttext(data) {
      this.text.push({
        uniname: this.formname,
        activeflag: false, // 新增加的属性，默认为false
        editshow: false, // 新增加的属性，默认为false
        other: this.texti, // 新增加的属性，默认为false
        data: '',
        sql: '',
        position: {
          width: '',
          height: '',
          top: '',
          left: ''
        },
        key: `text${this.texti}`,
        type: 'word',
        fontsize: '16px'
      })
      this.$nextTick(() => {
        this.initposition('text');
        let dragDom = this.dragDom = new Drag();
        dragDom.listenevent(this);
        this.texti++;
      })
    },
    selecttable(data) {
      this.list.push({
        uniname: this.formname,
        title: '',
        activeflag: false,
        editshow: false,
        other: this.listi,
        data: {
          rows: [],
          cols: [],
          total: 0,
          offset: 1,
          pageSize: 10,
        },
        sql: '',
        position: {
          width: '',
          height: '',
          top: '',
          left: ''
        },
        key: `list${this.listi}`,
        type: 'list',
      })
      this.$nextTick(() => {
        this.initposition('list');
        let dragDom = this.dragDom = new Drag();
        dragDom.listenevent(this);
        dragDom.dragzoom(`listzoom${this.listi}`, `list${this.listi}`);
        this.listi++;
      })
    },
    // 报表名
    selecttextname(data) {
      if (!this.visible2) {
        this.text.push({
          uniname: this.formname,
          activeflag: false, // 新增加的属性，默认为false
          editshow: false, // 新增加的属性，默认为false
          other: this.texti, // 新增加的属性，默认为false
          data: '',
          sql: '',
          position: {
            width: '',
            height: '',
            top: '',
            left: '',
            type: 'formname'
          },
          key: `text${this.texti}`,
          fontsize: '16px'
        })
        this.visible2 = true;
        this.formname = this.text[this.text.length - 1].data; // 如何得到对应的值
        // 给其他每个元素赋值
        for (let item of this.text) {
          item.uniname = this.formname;
        }
        for (let item of this.querys) {
          item.uniname = this.formname;
        }
        for (let item of this.charts) {
          item.uniname = this.formname;
        }
        this.$nextTick(() => {
          this.initposition('text');
          let dragDom = this.dragDom = new Drag();
          dragDom.listenevent(this);
          this.texti++;
        })
      }
    },
    //
    edittext(item, index) {
      this.text[index].editshow = true;
      if (item.position.type === 'formname') {
        this.formname = item.data;
        // 给其他每个元素赋值
        for (let item of this.text) {
          item.uniname = this.formname;
        }
        for (let item of this.querys) {
          item.uniname = this.formname;
        }
        for (let item of this.charts) {
          item.uniname = this.formname;
        }
        for (let item of this.list) {
          item.uniname = this.formname;
        }
      }
    },
    // 记录位置
    setpositiondata(type, index, left, top) {
      this[type][index].position.left = left;
      this[type][index].position.top = top;
    },
    // 记录宽高
    setpositiionbox(type, index, width, height) {
      this[type][index].position.width = width;
      this[type][index].position.height = height;
    },
    // 设置初始位置
    initposition(type = 'querys') {
      let boxwidth = $('#dragbox').width();
      let boxheight = $('#dragbox').height();
      let inittop;
      let initleft = '1.5%';
      let initwidth;
      let left;
      let top;
      if (type === 'querys') {
        inittop = '1.5%';
        initwidth = 200;
      } else if (type === 'text') {
        inittop = '15%';
        initwidth = 200;
      } else if (type === 'charts') {
        inittop = '20%';
        initwidth = 350;
      } else if (type === 'list') {
        inittop = '20%';
        initwidth = 350;
      }
      if (this[type].length > 1) {
        let preleft = (((this[type][this[type].length - 2].position.left).replace('%', '')) / 100) * boxwidth + $(`#${this[type][this[type].length - 2].key}`).width();
        let pretop = this[type][this[type].length - 2].position.top;
        if ((boxwidth - preleft) > initwidth) {
          left = (preleft + 100) * 100 / boxwidth + '%';
          top = pretop;
        } else {
          left = '1%';
          top = ((pretop.replace('%', '') / 100) * boxheight + $(`#${this[type][this[type].length - 2].key}`).height() + 10) * 100 / boxheight + '%';
        }
        this[type][this[type].length - 1].position.left = left;
        this[type][this[type].length - 1].position.top = top;
        $(`#${this[type][this[type].length - 1].key}`).css({
          left: left,
          top: top
        })
      } else {
        this[type][this[type].length - 1].position.left = initleft;
        this[type][this[type].length - 1].position.top = inittop;
        $(`#${this[type][this[type].length - 1].key}`).css({
          left: initleft,
          top: inittop
        })
      }
    },
    // 删除
    delquery(index) {
      this.querys.splice(index, 1);
    },
    deltext(index) {
      this.text.splice(index, 1);
    },
    delcharts(index) {
      this.charts.splice(index, 1);
    },
    dellist(index) {
      this.list.splice(index, 1);
    }
  },
  watch: {},
}
class Drag {
  constructor() {
    this.dragdoms = [];
    this.context = null;
    this.boxattr = {
      boxwidth: 0,
      boxheight: 0,
    };
    this.initdrag('.dragdom', {
      containment: '.dragbox',
      handle: '.handle',
    });
  }
  // 初始化宽高
  initbox() {
    this.boxattr.boxwidth = $('#dragbox').width();
    this.boxattr.boxheight = $('#dragbox').height();
  }
  initdrag(classname, box) {
    // 给组件绑定事件
    this.initbox();
    let dragDom = document.querySelectorAll(classname);
    for (let item of dragDom) {
      let dragdom = new Draggabilly(item, box);
      this.dragdoms.push(dragdom);
    }
  }
  // 缩放
  dragzoom(dragid, boxid, reschart) {
    console.log('zoom', dragid, boxid, reschart);
    this.initbox();
    let that = this.context;
    var posix;
    var item = document.getElementById(dragid);
    var itembox = document.getElementById(boxid);
    // 因为现在没有列表所以暂时注释该代码
    // let initboxmsg = {
    //     height: $(`#${boxid} .el-table`).height(),
    //     width: $(itembox).width(),
    //     padding: 7,
    // }
    $(item).mousedown(function (e) {
      posix = {
        'w': $(itembox).width(),
        'h': $(itembox).height(),
        'x': e.pageX,
        'y': e.pageY,
      };
      $('.dragdom').css('z-index', 4);
      $(`.${boxid}`).css('z-index', 5);
      $(itembox).addClass('activedom');
      // this.upindex('.dragdom', `.${boxid}`);
      // 在支持 setCapture 做些东东
      if (item.setCapture) {
        // 捕捉焦点
        item.setCapture();
        // 设置事件
        item.onmousemove = function (ev) {
          mouseMove(ev || event)
        }
        item.onmouseup = mouseUp
      } else {
        // 绑定事件
        $(document).bind('mousemove', mouseMove).bind('mouseup', mouseUp)
      }
      // 防止默认事件发生
      e.preventDefault()
    })
    // 移动事件
    function mouseMove(e) {
      // 获得屏幕的大小，来空间最大边界值，宽度进行控制，高度可不进行控制
      var pagewidth = $('.dragbox').width();
      // 计算并设置
      // (Math.min(Math.max(30, e.pageX - posix.x + posix.w), pagewidth - 10)) / pagewidth + '%',
      $(itembox).css({
        'width': (Math.min(Math.max(30, e.pageX - posix.x + posix.w), pagewidth - 10)) / pagewidth * 100 + '%',
        'height': Math.max(30, e.pageY - posix.y + posix.h)
      })
      let type = $(itembox).attr('type');
      let index = $(itembox).attr('dragindex');
      let width = (Math.min(Math.max(30, e.pageX - posix.x + posix.w), pagewidth - 10)) / pagewidth * 100 + '%';
      let height = Math.max(30, e.pageY - posix.y + posix.h);
      that.setpositiionbox(type, index, width, height);
      if (reschart !== undefined) {
        // 如果是图像就调用图形改变大小的函数，进行重绘大小
        // 此页面为非真实图像，所以暂时注释此段代码
        //  reschart[0].resize();
      } else {
        // console.log('现在的padding', $(nodeclassname).css('paddingTop'));
        // 如果是列表就改变一些样式来达到一种缩小的视觉效果
        // 现在先不做表格，所以暂时把此段代码注释
        // let nodeclassname = `#${boxid} td`;
        // let nowpadd = (($(`#${boxid} .el-table`).height() - initboxmsg.height) / 20) + initboxmsg.padding;
        // $(nodeclassname).css({
        //     'padding': `${nowpadd}px 0`
        // })
      }
    }
    // 停止事件
    function mouseUp(e) {
      // 在支持 releaseCapture 做些东东
      if (item.releaseCapture) {
        // 释放焦点
        item.releaseCapture()
        // 移除事件
        item.onmousemove = item.onmouseup = null
      } else {
        // 卸载事件
        $(itembox).removeClass('activedom')
        $(document).unbind('mousemove', mouseMove).unbind('mouseup', mouseUp)
      }
    }
  }
  // 修改点击时的优先级,鼠标按下时，被点击元素的优先级升高，其他元素的优先级降低
  // 当点击释放的时候，被点击元素的优先级降低
  upindex(allclassname, clickdom) {
    $(allclassname).css('z-index', 4);
    $(clickdom).css('z-index', 5);
  }
  // 暂时先不用
  pointerdown(e, pointer, element) {
    $(element).addClass('activedom');
  }
  dragstart(e, pointer, element) {
    this.upindex('.dragdom', element);
  }
  // 窗口发生变化时更新宽高
  windowReSize() {
    this.initbox();
  }
  // 把left计算成百分比
  Calculatepositionpercentage(dom) {
    $(dom).css({
      'left': (($(dom).position().left) * 100 / (this.boxattr.boxwidth)) + '%',
      'top': (($(dom).position().top) * 100 / (this.boxattr.boxheight)) + '%',
    });
    $(dom).removeClass('activedom');
  }
  dragmove(e, pointer, moveVector, element) { }
  dragend(e, pointer, element) {
    // 记录位置
    let type = $(element).attr('type');
    let index = $(element).attr('dragindex');
    this.initbox();
    let left = (($(element).position().left) * 100 / (this.boxattr.boxwidth)) + '%';
    let top = (($(element).position().top) * 100 / (this.boxattr.boxheight)) + '%';
    // 设置位置
    this.Calculatepositionpercentage(element);
    this.context.setpositiondata(type, index, left, top);
  }
  listenevent(that) {
    this.context = that;
    for (let item of this.dragdoms) {
      let $element = item.element;
      item.on('dragStart', (event, pointer) => {
        this.dragstart(event, pointer, $element);
      });
      item.on('dragMove', (event, pointer, moveVector) => {
        this.dragmove(event, pointer, moveVector, $element);
      });
      item.on('dragEnd', (event, pointer) => {
        this.dragend(event, pointer, $element);
      });
      item.on('pointerDown', (event, pointer) => {
        this.pointerdown(event, pointer, $element);
      })
    }
  }
}
</script>
