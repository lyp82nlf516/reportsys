<template>
  <div id="panelBox">
    <!-- <div class="hideMenu_bg"></div> -->
    <div class="hideMenu">
      <el-popover
        placement="bottom"
        width="180"
        trigger="click"
      >
        <ul>
          <li @click="closeAll">关闭全部</li>
          <li @click="closeOther">关闭其它标签</li>
        </ul>
        <el-button slot="reference"><img
            src="../../assets/img/menu2.png"
            alt="menu"
            title="menu"
          ></el-button>
      </el-popover>
    </div>
    <el-tabs
      v-model="editableTabsValue2"
      type="border-card"
      closable
      @tab-remove="removeTab"
      @tab-click="handleClick"
    >
      <el-tab-pane
        v-for="item in editableTabs2"
        :key="item.privilegeMenuId"
        :name="item.privilegeMenuId"
      > <span
          slot="label"
          id="mainHome"
          v-if="item.privilegeMenuId === '1'"
        > <img
            src="../../assets/img/home.png"
            alt="Home"
            title="Home"
            id="homeIcon"
          ></span>
        <span
          slot="label"
          id="mainHome"
          v-if="item.privilegeMenuId !== '1'"
        >
          {{ item.privilegeMenuName }}</span>
        <component :is="which_to_show"></component>
      </el-tab-pane>
    </el-tabs>
  </div>
</template>

<style lang="scss">
#panelBox {
  padding: 10px;
  background: #fff;
  background: rgb(247, 248, 250);
  .el-tabs__header.is-top {
    width: calc(100% - 40px);
    // border: 1px solid transparent;
    border-right: 1px solid #dcdfe6;
  }
  .hideMenu_bg {
    background: #7c95b8;
    width: 40px;
    height: 40px;
    position: absolute;
    right: 11px;
    top: 10px;
  }
  .hideMenu {
    position: absolute;
    width: 40px;
    right: 11px;
    top: 20px;
    cursor: pointer;
    // background-color: rgba(125, 151, 188, 0.8);
    .el-button--default {
      border: none;
      padding: 1px 11px;
    }
    .el-button:hover,
    .el-button--default:hover {
      background: none;
    }
    img {
      display: block;
      width: 18px;
      margin: 0 auto;
    }
  }
}
.el-popover:hover,
.el-button:hover {
  background: #fff;
}
.el-popover {
  background: #fff;
}
.el-popover li {
  text-align: center;
  line-height: 30px;
  cursor: pointer;
}
.el-tabs--card
  > .el-tabs__header
  #tab-1.el-tabs__item.is-active.is-closable
  .el-icon-close,
.el-tabs--card
  > .el-tabs__header
  #tab-1.el-tabs__item.is-closable:hover
  .el-icon-close {
  width: 0;
}
#tab-1 .el-icon-close:before {
  content: "";
}
#tab-1.el-tabs__item {
  padding: 0 20px;
}
#homeIcon {
  width: 17px;
  vertical-align: middle;
}
</style>

<script>
import bus from '@/bus';
import rpt from './home';
import tableship from './tableship';
import database from './database';
import confidchart from './confidchart';
import optionlist from './optionlist';
import concharttable from './concharttable';
import tablefield from './tablefield';
import rolemanagerz from './rolemanager';
import usersmanagerz from './usersmanager';
import reportlist from '../customreports/reportlist';
import reportconfigure from '../customreports/reportconfigure';
import configurecomp from '../customreports/configurecomp';
import treepage from '../menu/treepage';
import creatpage from './creatpage';
import formpage from './formpage';
import managerType from '../reportsform/managerType';
import menuOrder from '../reportsform/menu_order';
import defaultList from '../reportsform/defaultList';
import openConf from '../reportsform/openConf';
import managerConf from '../reportsform/managerConf';
import managerTree from '../reportsform/managerTree';
import managerUpload from '../reportsform/managerUpload';
export default {
  data() {
    return {
      dulStr: [],
      which_to_show: '',
      editableTabsValue2: '',
      editableTabs2: [
        {
          'privilegeMenuCode': 'rpt',
          'privilegeMenuName': '首页',
          'privilegeMenuId': '1'
        }
      ]
    }
  },
  created() {
    this.dulStr.push(this.editableTabs2[0].privilegeMenuId);
    this.editableTabsValue2 = '1';
    this.which_to_show = 'rpt';
    // $('#tab-1').attr('class', ' is-active');
  },
  computed: {},
  mounted() {
    // this.editableTabsValue2 = '1';
    // this.which_to_show = 'home';
    bus.$on('userDefinedEvent', (msg) => {
      // console.log('msg:', msg);
      // console.log('this.dulStr:', this.dulStr);
      // console.log('this.editableTabs2:', this.editableTabs2);
      if (this.dulStr.length > 0) {
        if (!this.dulStr.includes(msg.privilegeMenuId)) {
          this.editableTabs2.push(msg);
          this.dulStr.push(msg.privilegeMenuId);
          this.editableTabsValue2 = msg.privilegeMenuId;
        } else {
          this.editableTabsValue2 = msg.privilegeMenuId;
        }
      } else if (this.dulStr.length === 0) {
        this.editableTabs2.push(msg);
        this.dulStr.push(msg.privilegeMenuId);
        this.editableTabsValue2 = msg.privilegeMenuId;
      }
      if (msg.privilegeMenuCode.includes('_')) {
        let strArr = msg.privilegeMenuUrl.split('/');
        let param = strArr[strArr.length - 1].split('.')[0];
        this.which_to_show = param;
      } else {
        this.which_to_show = msg.privilegeMenuCode;
      }
    });
  },
  components: {
    rpt,
    tableship,
    tablefield,
    rolemanagerz,
    usersmanagerz,
    reportlist,
    reportconfigure,
    configurecomp,
    creatpage,
    formpage,
    managerType,
    menuOrder,
    defaultList,
    openConf,
    managerConf,
    managerTree,
    managerUpload,
    database,
    confidchart,
    optionlist,
    concharttable,
    treepage
  },
  methods: {
    // 单击面板选项，进行切换
    handleClick(tab, event) {
      if (this.editableTabs2.length > 0) {
        for (let i in this.editableTabs2) {
          if (tab.name === this.editableTabs2[i].privilegeMenuId) {
            let msg = this.editableTabs2[i];
            if (msg.privilegeMenuCode.includes('_')) {
              let strArr = msg.privilegeMenuUrl.split('/');
              let param = strArr[strArr.length - 1].split('.')[0];
              this.which_to_show = param;
            } else {
              this.which_to_show = msg.privilegeMenuCode;
            }
            // this.which_to_show = this.editableTabs2[i].privilegeMenuCode;
          }
        }
      }
    },
    addTab(targetName) { },
    // 移除面板上的单项数据
    removeTab(targetName) {
      let tabs = this.editableTabs2;
      let activeName = this.editableTabsValue2;
      if (targetName !== '1') {
        if (activeName === targetName) {
          tabs.forEach((tab, index) => {
            if (tab.privilegeMenuId === targetName) {
              // tabs.splice(index, 1);
              // this.editableTabs2 = tabs;
              let nextTab = tabs[index + 1] || tabs[index - 1];
              // console.log('nextTab', nextTab)
              if (nextTab) {
                activeName = nextTab.privilegeMenuId;
                this.which_to_show = nextTab.privilegeMenuCode;
                // this.editableTabsValue2 = activeName;
              }
            }
          });
        }
        this.editableTabsValue2 = activeName;
        this.editableTabs2 = tabs.filter(tab => tab.privilegeMenuId !== targetName);
      }
    },
    // 关闭主页面板全部标签
    closeAll() {
      let tabs = this.editableTabs2;
      this.editableTabs2 = tabs.filter(tab => tab.privilegeMenuId === tabs[0].privilegeMenuId);
      this.dulStr = this.dulStr.filter(tab => tab === tabs[0].privilegeMenuId);
      this.editableTabsValue2 = this.editableTabs2[0].privilegeMenuId;
      let msg = this.editableTabs2[0];
      if (msg.privilegeMenuCode.includes('_')) {
        let strArr = msg.privilegeMenuUrl.split('/');
        let param = strArr[strArr.length - 1].split('.')[0];
        this.which_to_show = param;
      } else {
        this.which_to_show = msg.privilegeMenuCode;
      }
    },
    closeOther() {
      let tabs = this.editableTabs2;
      this.editableTabs2 = tabs.filter(tab => (tab.privilegeMenuId === tabs[0].privilegeMenuId || this.editableTabsValue2 === tab.privilegeMenuId));
      this.dulStr = this.dulStr.filter(tab => (tab === tabs[0].privilegeMenuId || tab === this.editableTabsValue2));
      this.editableTabsValue2 = this.editableTabs2[1].privilegeMenuId;
      let msg = this.editableTabs2[1];
      if (msg.privilegeMenuCode.includes('_')) {
        let strArr = msg.privilegeMenuUrl.split('/');
        let param = strArr[strArr.length - 1].split('.')[0];
        this.which_to_show = param;
      } else {
        this.which_to_show = msg.privilegeMenuCode;
      }
      // this.which_to_show = tabs[1].privilegeMenuCode;
    }
  }
}
</script>
