<template>
  <div class="rolemanagerbox">
    <el-collapse v-model="activeNames">
      <el-collapse-item title="查看/编辑角色信息" name="1">
        <div class="tablebox">
          <div class="pagetitle">
            <div class="inputbox">
              <el-input v-model="keyinput" placeholder="请输入关键字查询" @keyup.native.enter="querydata" @blur="querydata"></el-input>
              <el-button class="querybtn" icon="el-icon-search" @click="querydata">查询</el-button>
            </div>
            <div class="btngroup">
              <el-button @click="addopen" icon="el-icon-plus">新增</el-button>
              <el-button @click="delopen" icon="el-icon-delete"> 删除</el-button>
            </div>
          </div>
          <div class="eletable">
            <el-table :data="tableData" style="width: 100%" border @selection-change="handleSelectionChange">
              <el-table-column type="selection" width="55"></el-table-column>
              <el-table-column prop="rolecode" label="角色编码" type="text" size="small" show-overflow-tooltip></el-table-column>
              <el-table-column prop="rolename" label="角色名称" type="text" size="small" show-overflow-tooltip> </el-table-column>
              <el-table-column prop="adjust" label="调整" width="80"></el-table-column>
              <el-table-column prop="download" label="下载" width="80"> </el-table-column>
              <el-table-column prop="reportcode" label="报表编码" show-overflow-tooltip></el-table-column>
              <el-table-column prop="menucode" label="目录编码" show-overflow-tooltip> </el-table-column>
              <el-table-column label="操作" width="80">
                <template slot-scope="scope">
                  <el-button type="text" size="small" @click="edit(scope.row)">修改</el-button>
                </template>
              </el-table-column>
            </el-table>
            <div class="paginationbox">
              <el-pagination @current-change="currentpagechange" :total="total" :current-page="offset" :page-size="pageSize" layout="prev, pager, next, total, jumper"></el-pagination>
            </div>
          </div>
        </div>
      </el-collapse-item>
    </el-collapse>
    <!-- 新增和修改的弹窗 -->
    <el-dialog title="新增" :visible.sync="dialogFormVisible">
      <el-form :model="ruleForm" ref="ruleForm" :rules="rules" label-width="120px" class="demo-ruleForm">
        <el-form-item label="角色编码" prop="rolecode">
          <el-input v-model="ruleForm.rolecode"></el-input>
        </el-form-item>
        <el-form-item label="角色名称" prop="rolename">
          <el-input v-model="ruleForm.rolename"></el-input>
        </el-form-item>
        <el-form-item label="调整权限" prop="adjust">
          <el-switch v-model="ruleForm.adjust" on-color="#13ce66" off-color="#ff4949"></el-switch>
        </el-form-item>
        <el-form-item label="下载权限" prop="download">
          <el-switch v-model="ruleForm.download" on-color="#13ce66" off-color="#ff4949"></el-switch>
        </el-form-item>
        <el-form-item label="报表权限">
          <el-collapse accordion v-model="activeNames">
            <el-collapse-item name="1">
              <template slot="title">
                <el-input v-model="ruleForm.reportcode"></el-input>
              </template>
              <div>
                <el-tree :data="data" show-checkbox node-key="rtpCataId" ref="treedata" :props="defaultProps" @check-change="Checktreedata">
                </el-tree>
              </div>
            </el-collapse-item>
          </el-collapse>
        </el-form-item>
        <el-form-item label="目录权限">
          <el-collapse v-model="activeNames" accordion>
            <el-collapse-item name="2">
              <template slot="title">
                <el-input v-model="ruleForm.menucode"></el-input>
              </template>
              <div>
                <el-tree :data="datamenu" show-checkbox node-key="privilegeMenuId" ref="treemenu" :props="defaultPropsmenu" @check-change="Checktreemenu">
                </el-tree>
              </div>
            </el-collapse-item>
          </el-collapse>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="resetForm('ruleForm')">取 消</el-button>
        <el-button @click="submitForm('ruleForm')">确 定</el-button>
      </div>
    </el-dialog>
  </div>
</template>
<style lang="scss">
.rolemanagerbox {
  width: 100%;
  height: 100%;
  overflow: auto;
  padding: 10px;
  .querybox {
    background-color: #fff;
    .inputbox {
      overflow: auto;
      padding: 5px 10px;
      .el-button:hover {
        background-color: rgba(123, 126, 255, 0.9);
        border: 1px solid rgba(123, 126, 255, 0.9);
        color: #fff;
      }
    }
    .el-input {
      width: 200px;
      float: left;
      .el-input__inner:hover {
        border-color: #6d71ef;
      }
      .el-input__inner:focus {
        border-color: #6d71ef;
      }
    }
    .el-input__inner {
      border-radius: 0;
      height: 27px;
      font-size: 12px;
    }
    .querybtn {
      padding: 6px 10px;
      border-radius: 0;
      font-size: 12px;
      display: block;
      float: left;
      margin-left: 10px;
    }
  }
  .el-collapse-item__header {
    padding-left: 15px;
    border-bottom: 1px solid #dfe6ec;
    .el-collapse-item__arrow {
      float: left;
    }
  }
  .el-collapse-item__content {
    padding: 0px 15px 10px;
  }
  .tablebox {
    background-color: #fff;
    height: 100%;
    .eletable {
      .el-button--text {
        color: rgba(123, 126, 255, 0.9);
      }
      .el-checkbox__inner::after {
        top: 3px;
        left: 6px;
      }
      .el-checkbox__input.is-indeterminate .el-checkbox__inner::before {
        top: 7px;
      }
      .el-checkbox__input.is-checked .el-checkbox__inner,
      .el-checkbox__input.is-indeterminate .el-checkbox__inner {
        background-color: #6d71ef;
        border-color: #6d71ef;
      }
      .el-checkbox__inner:hover {
        border-color: #6d71ef;
      }
      .el-pager li {
        font-weight: normal;
        border: 1px solid #d1dbe5;
        border-left: none;
        min-width: 28px;
      }
      .el-pagination {
        text-align: right;
        margin-top: 10px;
        margin-bottom: 10px;
      }
      .el-pagination__total {
        margin-left: 10px;
      }
      .el-pagination button {
        min-width: 28px;
      }
      .el-pager li:first-child {
        border-left: 1px solid #d1dbe5;
      }
      .el-pager li:last-child {
        border-right: 1px solid #d1dbe5;
      }
      .el-pager li.active {
        border-color: #20a0ff;
        border-color: rgba(123, 126, 255, 0.9);
        background-color: #20a0ff;
        background-color: rgba(123, 126, 255, 0.9);
        color: #fff;
        cursor: default;
      }
      .el-pager li.active:hover {
        color: #fff;
      }
      .el-pager li:hover {
        color: rgba(123, 126, 255, 1);
      }
      .el-pagination .btn-next,
      .el-pagination .btn-prev {
        border: 1px solid #d1dbe5;
      }
      .el-pagination .btn-next:hover .el-icon-arrow-right:before {
        color: rgba(123, 126, 255, 0.9);
      }
      .el-pagination .btn-prev:hover .el-icon-arrow-left:before {
        color: rgba(123, 126, 255, 0.9);
      }
      .el-pagination__editor.el-input .el-input__inner:focus {
        border-color: rgba(123, 126, 255, 1);
      }
      .el-pagination .btn-next {
        border-left: none;
        border-radius: 0 2px 2px 0;
        padding-left: 6px;
      }
      .el-pagination .btn-prev {
        border-right: none;
        border-radius: 2px 0 0 2px;
        padding-right: 6px;
      }
      .el-pagination__editor.el-input {
        width: 30px;
      }
      .el-checkbox__inner {
        width: 18px;
        height: 18px;
      }
      .el-table .cell {
        padding-right: 15px;
        padding-left: 15px;
      }
    }
  }
  .el-table td,
  .el-table th {
    height: 32px;
    font-size: 12px;
    padding: 0;
  }
  .el-table th.gutter {
    display: table-cell !important;
  }
  .pagetitle {
    width: 100%;
    overflow: auto;
    .titletext {
      height: 20px;
      display: inline-block;
      position: absolute;
      left: 0px;
      padding: 4px 10px;
      border-bottom: 3px solid blue;
      border-bottom: 3px solid #6d71ef;
      letter-spacing: 2px;
    }
    .inputbox {
      overflow: auto;
      float: left;
      margin: 10px auto;
      .el-button {
        margin-left: 10px;
        padding: 12px
      }
      .el-button:hover {
        background-color: rgba(123, 126, 255, 0.9);
        border: 1px solid rgba(123, 126, 255, 0.9);
        color: #fff;
      }
      .el-input {
        width: 240px;
      }
      .querybtn {
        margin-left: 10px;
      }
      .el-button {
        padding: 12px;
      }
    }
    .el-input {
      // width: 200px;
      width: 240px;
      float: left;
      .el-input__inner:hover {
        border-color: #6d71ef;
      }
      .el-input__inner:focus {
        border-color: #6d71ef;
      }
    }
  }
  .btngroup {
    float: right;
    margin-top: 15px;
    .el-button {
      padding: 8px;
      font-size: 12px;
      //border: 1px solid blue;
      border: 1px solid rgba(123, 126, 255, 0.9);
      border-radius: 0;
      box-shadow: 0px 0px 1px #888888 inset;
      background: rgba(123, 126, 255, 0.9);
      border: 1px solid rgba(123, 126, 255, 0.9);
      color: #fff;
    }
    .el-button:hover {
      background-color: rgba(123, 126, 255, 0.9);
      border: 1px solid rgba(123, 126, 255, 0.9);
      color: #fff;
    }
    .btnDel {
      // float: right;
    }
  }
  .el-dialog {
    .el-form-item {
      margin-bottom: 10px;
      .el-input__inner {
        height: 28px;
      }
      .el-form-item__label {
        font-size: 12px;
      }
    }
    .el-input__inner:hover,
    .el-form-item.is-success .el-input__inner,
    .el-form-item.is-success .el-input__inner:focus,
    .el-form-item.is-success .el-textarea__inner,
    .el-form-item.is-success .el-textarea__inner:focus {
      border-color: #6d6fef;
    }
    .dialog-footer {
      .el-button {
        padding: 5px 10px;
        font-size: 12px;
        border-radius: 0;
        border: 1px solid #6d6fef;
        color: #6d6fef;
      }
      .el-button:focus,
      .el-button:hover {
        color: #fff;
        border: 1px solid #6d6fef;
        background: #6d6fef;
      }
    }
    .el-dialog__header {
      background-color: #6d71ef;
      padding: 10px;
      .el-dialog__title {
        color: #fff;
        font-weight: bold;
      }
      .el-dialog__headerbtn {
        top: 8px;
        right: 7px;
        .el-icon-close:before {
          font-size: 25px;
          font-weight: bold;
        }
      }
    }
    .el-dialog__headerbtn .el-dialog__close {
      color: #fff;
    }
    .el-dialog__body {
      padding: 10px 10px;
      overflow: auto;
    }
    .el-form-item__error {
      padding-top: 0;
    }
    .el-collapse {
      border: 1px solid #dfe6ec;
      border-radius: 0;
      .el-collapse-item__arrow {
        line-height: 32px;
      }
      .el-input__inner {
        width: 98%;
        cursor: pointer;
      }
    }
    .el-collapse-item__wrap {
      border-top: 1px solid #ebeef5;
    }
    .el-collapse-item__header {
      position: relative;
      height: 30px;
      line-height: 30px;
      .el-input {
        position: absolute;
        left: 0;
        top: 0;
        z-index: 9;
        .el-input__inner {
          line-height: 30px;
          border-color: transparent;
        }
      }
      .el-collapse-item__arrow {
        position: absolute;
        z-index: 10;
        right: 0;
        top: 0;
        .el-collapse-item__arrow {
          line-height: 30px;
        }
      }
    }
    .el-collapse-item__header__arrow {
      display: none;
    }
    .el-collapse-item__content {
      height: 200px;
      padding: 0px;
      overflow: auto;
      .el-checkbox__inner {
        background-color: #6d6fef;
        border-color: #6d6fef;
      }
      .el-checkbox__inner::after {
        left: 6px;
      }
    }
    .el-switch__core .el-switch__button {
      height: 12px;
      width: 12px;
    }
    .el-switch__core,
    .el-switch__label {
      height: 18px;
    }
    .el-switch,
    .el-switch__label,
    .el-switch__label * {
      font-size: 12px;
    }
    .el-switch__label * {
      top: 2px;
    }
    .el-tree {
      border: 0px;
      background: none;
      .el-tree-node__content {
        height: 26px;
        line-height: 26px;
        .el-checkbox__inner {
          border-radius: 0px;
          width: 16px;
          height: 16px;
        }
        .el-checkbox__input.is-checked .el-checkbox__inner {
          background-color: #6d6fef;
        }
        .el-tree-node__label {
          font-size: 12px;
        }
      }
    }
    .el-switch.is-checked .el-switch__core {
      border-color: #6d6fef !important;
      background-color: #6d6fef !important;
    }
    .el-switch__core {
      border-color: #ccc !important;
      background-color: #ccc !important;
    }
    .el-collapse-item__header {
      padding-left: 0px;
    }
  }
  .el-switch__core:after {
    top: 0px;
  }
}
</style>
<script>
import {
  listrole,
  addrole,
  editrole,
  delrole,
  reprotInitz, // 报表树接口
  queryAllMenuz
} from '@/services/query';
export default {
  data() {
    return {
      activeNames: '1',
      keyinput: '',
      tableData: [],
      ruleForm: {
        rolecode: '',
        rolename: '',
        adjust: '',
        download: '',
        reportcode: '',
        menucode: ''
      },
      tempruleForm: {
        rolecode: '',
        rolename: '',
        adjust: false,
        download: false,
        reportcode: '',
        menucode: ''
      },
      rules: {
        rolecode: [{
          required: true,
          message: '请输入角色编码',
          trigger: 'blur'
        }, {
          message: '请输入字母下划线数字的组合',
          trigger: 'blur,change',
          pattern: /^[0-9a-zA-Z_]{1,}$/,
        }],
        rolename: [{
          required: true,
          message: '请输入角色名称',
          trigger: 'change'
        }]
      },
      dialogFormVisible: false,
      data: [],
      datamenu: [],
      defaultProps: {
        children: 'subList',
        label: 'rtpCataName'
      },
      defaultPropsmenu: {
        label: 'privilegeMenuName',
        children: 'subList',
      },
      offset: 1,
      pageSize: 10,
      selectdata: [],
      total: 0,
      addoredit: true,
      selectreport: [],
      selectmenu: []
    }
  },
  mounted() {
    this.Getdata();
    this.reprotInit();
    this.queryAllMenu();
  },
  methods: {
    // 得到列表数据
    Getdata() {
      let val = {
        'keyword': this.keyinput,
        'offset': this.offset,
        'pageSize': this.pageSize
      };
      listrole(val).then((res) => {
        // console.log('keyword', val, res);
        if (res.status === 200) {
          this.tableData = res.data.rows;
          this.total = res.data.total;
        }
      })
    },
    // 列表进行选择
    handleSelectionChange(select) {
      this.selectdata = JSON.parse(JSON.stringify(select));
    },
    // 删除
    delopen() {
      let del = [];
      for (let i of this.selectdata) {
        del.push(i.id);
      }
      delrole(del).then((res) => {
        if (res.status === 200) {
          this.Getdata();
        }
      })
    },
    // 点击翻页
    currentpagechange(val) {
      this.offset = val;
      this.Getdata();
    },
    // 报表权限选择
    Checktreedata(data, checked, indeterminate) {
      let checkid = this.$refs.treedata.getCheckedKeys();
      this.selectreport = JSON.parse(JSON.stringify(checkid));
      this.ruleForm.reportcode = '';
      for (let item of this.selectreport) {
        // 只穿8位的
        if (item.length === 8) {
          if (this.ruleForm.reportcode === '') {
            this.ruleForm.reportcode = `${item}`
          } else {
            this.ruleForm.reportcode = `${this.ruleForm.reportcode},${item}`
          }
        }
      }
    },
    // 目录权限选择
    Checktreemenu(data, checked, indeterminate) {
      let checkid = this.$refs.treemenu.getCheckedKeys();
      this.selectmenu = JSON.parse(JSON.stringify(checkid));
      // console.log('this.selectmenu', this.selectmenu);
      this.ruleForm.menucode = this.selectmenu.join(',')
    },
    // 报表树接口
    reprotInit() {
      reprotInitz().then((res) => {
        // console.log('报表树接口-res----', res);
        if (res.status === 200) {
          this.data = res.data;
        }
      })
    },
    // 报表树接口
    queryAllMenu() {
      queryAllMenuz().then((res) => {
        // console.log('目录树接口-res', res);
        if (res.status === 200) {
          this.datamenu = res.data;
        }
      })
    },
    // 新增数据
    Adddata() {
      let val = JSON.parse(JSON.stringify(this.ruleForm));
      // console.log('this.ruleForm', this.ruleForm);
      addrole(val).then((res) => {
        if (res.status === 200) {
          this.Getdata();
          this.$refs.treemenu.setCheckedKeys([]);
          this.$refs.treedata.setCheckedKeys([]);
        }
      })
    },
    // 修改数据
    Editdata() {
      let val = JSON.parse(JSON.stringify(this.ruleForm));
      editrole(val).then((res) => {
        if (res.status === 200) {
          this.Getdata();
          this.$refs.treemenu.setCheckedKeys([]);
          this.$refs.treedata.setCheckedKeys([]);
        }
      })
    },
    // 打开新增窗口
    addopen() {
      this.dialogFormVisible = true;
      this.addoredit = true;
      this.ruleForm = JSON.parse(JSON.stringify(this.tempruleForm));
      this.$nextTick(() => {
        this.$refs.treemenu.setCheckedKeys([]);
        this.$refs.treedata.setCheckedKeys([]);
      })
    },
    // 打开修改窗口
    edit(row) {
      this.addoredit = false;
      this.dialogFormVisible = true;
      this.ruleForm = JSON.parse(JSON.stringify(this.tempruleForm));
      // console.log('row', this.ruleForm);
      for (let i in row) {
        if (row[i] === 'true') {
          this.ruleForm[i] = true;
        } else if (row[i] === 'false') {
          this.ruleForm[i] = false;
        } else {
          this.ruleForm[i] = row[i];
        }
      }
      this.$nextTick(() => {
        // console.log('this.$refs.treemenu', this.$refs.treemenu);
        if (this.ruleForm.menucode === '') {
          this.$refs.treemenu.setCheckedKeys([]);
        } else {
          if (this.ruleForm.menucode) {
            this.$refs.treemenu.setCheckedKeys(this.ruleForm.menucode.split(','));
          }
        }
        if (this.ruleForm.reportcode === '') {
          this.$refs.treedata.setCheckedKeys([]);
        } else {
          this.$refs.treedata.setCheckedKeys(this.ruleForm.reportcode.split(','));
        }
      });
    },
    // 点击查询
    querydata() {
      this.Getdata();
    },
    submitForm(ruleForm) {
      this.$refs[ruleForm].validate((valid) => {
        if (valid) {
          this.dialogFormVisible = false;
          if (this.addoredit) {
            this.Adddata();
          } else {
            this.Editdata();
          }
        } else {
          return false;
        }
      });
    },
    resetForm(ruleForm) {
      // this.$refs[formName].resetFields();
      this.dialogFormVisible = false;
    }
  }
}
</script>
